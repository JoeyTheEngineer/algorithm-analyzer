from inspect import currentframe, getframeinfo

frameinfo = getframeinfo(currentframe())

print(frameinfo.filename, frameinfo.lineno)

fin = open("code.txt", "r")
code="from inspect import currentframe, getframeinfo;frameinfo = getframeinfo(currentframe())\n"

#open file to keep track of line numbers
getLineNumber="frameinfo = getframeinfo(currentframe())"
def openFileCount():
    try:
        fileCountLine=open("count.txt","w")
        fileCountLine.seek(0)
        fileCountLine.truncate()
    except IOError: 
        print("An error occurred.")
    return 0


def writeInjectedCode(code):
    try:
        fout = open("toCompile.py", "w")        
        fout.seek(0)
        fout.truncate()
        fout.write(code)
        fout.close()
    except IOError: 
        print("An error occurred.")
    return 0

for line in fin:
    indent=0
    for character in line:
        if(character!=" "):
            break
        else:
            indent = indent + 1
    #print(str(indent) + " " + line)

    #we need proper indent for injecting getLineNumber
    #one \t = 4 whitespaces
    if(indent!=1):
        inject=' '*indent + "frameinfo = getframeinfo(currentframe())"
        line= inject + "\n" + line
        print(line)
        code=code+line
    #print(fin.readline())

# print(code)
fin.close()

writeInjectedCode(code)


    if( stack.getSize() != 0 and stack.peek() == indent ):  
        detect_loop_end()    
        stack.pop()
        inject=' '*indent
        inject+="finject.write(str(get_linenumber())+ ' ')#end_loop"
        line=inject + "\n" + line



------------------------------------------
24may 2022
import sys
from inspect import currentframe, getframeinfo
from indent import compute_indent
from loopStart import detect_loop_start
from scopeEnd import scope_end_offset

from indent import compute_indent
from loopEnd import end_loop_inject
from detectRecur import compareArrays, detect_recursion,detect_function_call,detect_function_implementation
from writeModifiedCode import writeInjectedCode

from inject import code_inject

frameinfo = getframeinfo(currentframe())
# print(frameinfo.filename, frameinfo.lineno)



code="""from inspect import currentframe, getframeinfo
from count import get_linenumber
from inspect import getclosurevars
from detectRecur import detect_recursion"""

# Open and read file into buffer
# print(sys.argv)
# fin = open("code.txt", "rt")
fin = open(sys.argv[1], "rt")
lines = fin.readlines()

# If we need to read line 33, and assign it to some variable
# x = lines[33]
# print(x)

#open file to keep track of line numbers
stack_loop = []

function_defs=[]
function_defs_start=[]
function_defs_end=[]

function_calls=[]
function_call_line_numbers=[]
function_call_indents=[]

functions=[]
functions_lineno=[]
functions_indent=[]

items=[]
start_offset=[]
end_offset=[]
indent_inject=[]

offset=0
for i in range(0,len(lines)):
    indent=compute_indent(lines[i])
    inject=' '*indent

    if detect_function_implementation(lines[i]):
        function_defs.append(detect_function_implementation(lines[i]))
        function_defs_start.append(i)
        function_defs_end.append(scope_end_offset(lines,i,indent))
        
        # print(indent)
        fin.close

    elif detect_function_call(lines[i]):
        function_calls.append(detect_function_call(lines[i]))
        function_call_line_numbers.append(i)
        function_call_indents.append(indent)
   

    if detect_loop_start(lines[i]) :
        # inject += "finject.write(str(get_linenumber())+ ' ')#start_loop"
        items.append("loop")
        start_offset.append(i)
        end_offset.append(scope_end_offset(lines,i,indent))
        indent_inject.append(indent)
        

# print(lines)
    
    

#if stack_loop not empty but end of file
if(len(stack_loop) != 0):
    append="\n"+' '*stack_loop[-1]+"finject.write(str(get_linenumber())+ ' ')#end_loop"
    code =code+append
# print(code)
fin.close()

# print(function_defs)
# print(function_calls)

functions,functions_lineno,functions_indent=compareArrays(function_defs,function_defs_start,function_defs_end, function_calls,function_call_line_numbers, function_call_indents)
# print(function_defs)
# print(function_calls)
# print(functions)
lines.append("finject.close()")

for i in range (0,len(functions)):
    lines.append("detect_recursion("+functions[i]+")")


writeInjectedCode(code)

# print(start_offset)
# print(end_offset)
# print(item)

# print(function_defs)
# print(function_defs_start)
# print(function_defs_end)

# print(function_calls)
# print(function_call_line_numbers)

# print(functions)
# print(functions_lineno)

# print (items)
# print(start_offset)
# print(end_offset)
# print(indent_inject)

items+=functions
start_offset+=functions_lineno
end_offset+=functions_lineno
indent_inject+=functions_indent

# print (items)
# print(start_offset)
# print(end_offset)
# print(indent_inject)

code_inject(lines, start_offset, end_offset, items, indent_inject)

# for i in range(0,len(lines)):
#     print(str(i)+":"+lines[i])